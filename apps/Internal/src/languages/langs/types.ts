export default interface AppLanguage {
  validator: {
    require: string;
    requireField: string;
    requireEmail: string;
    requirePass: string;
    requireConfirmPass: string;
    requireConfirmNewPass: string;
    confirmPassFail: string;
    requireNewPass: string;
    passMin8: string;
    validPass: string;
    cccdMin12: string;
    requireNumber: string;
    requireRoleOrGroup: string;
    errFormat: string;
    errDuplicate: string;
    requireProject: string;
    requireRole: string;
    duplicate: string;
    confirmCancel: string;
    DUPLICATED_RULE: string;
    DUPLICATED_LOCI: string;
    DUPLICATED_KIT: string;
    LOCI_IN_USE: string;
    KIT_IN_USE: string;
    MATCHING_RULE_IN_USE: string;
    errZero: string;
  };
  common: {
    reject: string;
    country: string;
    national: string;
    totalFileCollection: string;
    totalSampleCollection: string;
    ratio: string;
    region: string;
    count: string;
    age: string;
    male: string;
    female: string;
    totalNumber: string;
    date: string;
    dashboard: string;
    success: string;
    notSuccess: string;
    updateSuccess: string;
    deploySuccess: string;
    fail: string;
    or: string;
    action: string;
    desc: string;
    filter: string;
    scanBarcode: string;
    search: string;
    refresh: string;
    add: string;
    addSuccess: string;
    delete: string;
    view: string;
    person: string;
    organization: string;
    deleteSuccess: string;
    save: string;
    copy: string;
    cancel: string;
    close: string;
    relatedDataDeleted: string;
    accept: string;
    confirmDelete: string;
    confirmDeleteGroupTestAction: string;
    confirmCancelPopup: string;
    confirmSavePopup: string;
    confirmEditGroupTestPopup: string;
    confirmDeploy: string;
    confirmCloseModalAdd: string;
    confirmCloseModalUpdate: string;
    confirmCancelAction: string;
    confirmCancelGroupTestAction: string;
    confirmUpdate: string;
    confirmApprovedRequest: string;
    confirmRefuseRequest: string;
    cannotRevert: string;
    continue: string;
    confirmRunTest: string;
    copySuccess: string;
    back: string;
    active: string;
    inactive: string;
    cccd: string;
    authen: string;
    birth: string;
    checkEmailOTP: string;
    confirm: string;
    logout: string;
    name: string;
    email: string;
    error: string;
    noData: string;
    detail: string;
    update: string;
    edit: string;
    yes: string;
    no: string;
    total: string;
    item: string;
    placeholderSearch: string;
    detailSearch: string;
    status: string;
    processingStatus: string;
    viewDetail: string;
    updateInfo: string;
    tax: string;
    address: string;
    province: string;
    district: string;
    commune: string;
    addressDetail: string;
    phoneNumber: string;
    accessArea: string;
    object: string;
    time: string;
    startDate: string;
    endDate: string;
    startDateOfBirth: string;
    endDateOfBirth: string;
    area: string;
    door: string;
    creator: string;
    creationDate: string;
    updater: string;
    updatedDate: string;
    image: string;
    unit: string;
    gender: string;
    on: string;
    off: string;
    start: string;
    end: string;
    addList: string;
    jump_to: string;
    result: string;
    condition: string;
    perform: string;
    completed: string;
    valid: string;
    downDetailFile: string;
    invalid: string;
    optionInactive: string;
    helper: string;
    system: string;
    subscribers: string;
    note: string;
    all: string;
    year: string;
    month: string;
    day: string;
    check: string;
    suffixSuccess: string;
    totalPages: string;
    hour: string;
    motorbike: string;
    oto: string;
    electricMotorbike: string;
    whitelist: string;
    addNewVehicle: string;
    confirmAddNewMore: string;
    notify: string;
    warning: string;
    clear: string;
    stt: string;
    export: string;
    requireMessage: string;
    createSuccess: string;
    test: string;
    open: string;
    ipRequired: string;
    ipFormat: string;
    ipExits: string;
    notes: string;
    run: string;
    stop: string;
    existsItem: string;
    download: string;
    downloadCSV: string;
    downloadJSON: string;
    downloadXLSX: string;
    downloadPDF: string;
    downloadDOCX: string;
    copyLink: string;
    maxMessage: string;
    approve: string;
    refuse: string;
    addSample: string;
    selectFile: string;
    enterPlaceholder: string;
    avoid: string;
    normal: string;
    warningDrug: string;
    avoid_count: string;
    normal_count: string;
    warningDrug_count: string;
    id: string;
    highRisk: string;
    lowRisk: string;
    mediumRisk: string;
    somaudathuthap: string;
    somaudaphantich: string;
    somauchuaphantich: string;
    nguycothap: string;
    nguycotrungbinh: string;
    nguycocao: string;
    path: string;
    property: string;
    value: string;
    actionCannotRestored: string;
    approvedRequestSuccess: string;
    refusedRequestSuccess: string;
    placeholderFullname: string;
    placeholderCCCD: string;
    placeholderSelectGender: string;
    identificationNumber: string;
    addRequestSuccess: string;
    complete: string;
    inComplete: string;
    deleteForbidden: string;
    deleteNotFound: string;
    label: string;
    primary: string;
    secondary: string;
    sendRequest: string;
  };

  layout: {
    leftMenu: {
      orderManagement: string;
      unitManagement: string;
      createUnit: string;
      unitList: string;
      debtManagement: string;
      debtDetail: string;
      inventorySearch: string;
      phoneNoInventorySearch: string;
      serialInventorySearch: string;
      inventoryManagement: string;
      inventoryDetail: string;
      inventoryTransfer: string;
      subscriberActivation: string;
    };
    header: {
      sync: string;
      notSync: string;
      syncNow: string;
      syncing: string;
      titleService: string;
      extend: string;
      info: string;
      viewAllNotify: string;
      hideNotify: string;
      seenAll: string;
      noNotify: string;
    };
  };
  userManagement: {
    title: string;
  };
  province: {
    title: string;
    detail: string;
    area: string;
    population: string;
    male: string;
    female: string;
    noSample: string;
    search: string;
  };
  exploration: {
    collectionUnit: { filter: string; title: string; search: string };
    dataSource: { filter: string };
    subject: { title: string; search: string };
    variant: {
      title: string;
      detail: string;
      search: string;
      snpSearch: string;
    };
    gene: { title: string };
    file: {
      title: string;
      exportData: string;
      totalSize: string;
      totalFile: string;
    };
    collectionSample: { title: string };
    tableHeader: {
      // subjecg;
      fullName: string;
      dateOfBirth: string;
      placeOfBirth: string;
      gender: string;
      ethnic: string;
      nationality: string;
      idNumber: string;
      numOfSamples: string;
      numOfFiles: string;
      // collection samplg;
      transDateTime: string;
      transCode: string;
      caseData: string;
      dataSource: string;
      placeSampling: string;
      collectionUnitId: string;
      samplingDateTime: string;
      analysisCompletedDateTime: string;
      sampleType: string;
      // filg;
      fileName: string;
      fileType: string;
      extractionTime: string;
      sizeFile: string;
      collectionSampleId: string;
      collectionUnitName: string;
      // variang;
      variantId: string;
      variantSubject: string;
    };
  };
  risk: {
    search: string;
  };
  auth: {
    title: string;
    pass: string;
    remember: string;
    forgotPassword: string;
    titleForgotPassword: string;
    login: string;
    requiredUserPass: string;
    labelUser: string;
    signup: string;
    alreadyHaveAccount: string;
    createAccount: string;
    loginSuccess: string;
    loginFail: string;
    accountIncorrect: string;
    nameCustomer: string;
    nameCustomer2: string;
    labelClientIdentity: string;
    placeholderClientIdentity: string;
    placeholderNameCustomer: string;
    placeholderNameCustomer2: string;
    placeholderCCCD: string;
    placeholderTax: string;
    placeholderEmail: string;
    placeholderPass: string;
    placeholderConfirmPass: string;
    placeholderChangePass: string;
    placeholderNewPass: string;
    placeholderConfirmNewPass: string;
    typeCustomer: string;
    confirmOTP: string;
    chooseClient: string;
    signUpSuccess: string;
    checkEmail: string;
    changePass: string;
    changePassSuccess: string;
    newPass: string;
    oldPass: string;
    typeOtp: string;
    notFoundOTP: string;
    resendOTP: string;
    recoveryPassSuccess: string;
    here: string;
    labelRegisterSuccess: string;
    checkEmailSpam: string;
    backLogin: string;
    titleOtp: string;
    labelOtp: string;
    timeCount: string;
    checkCode: string;
    sendOtpAgain: string;
    resetPass: string;
    sessionExpired: string;
  };
  role: {
    title: string;
    status: {
      active: string;
      inactive: string;
    };
    role: string;
    roleCode: string;
    roleName: string;
    statusName: string;
    addRole: string;
    editRole: string;
    deleteRole: string;
    viewRole: string;
    addSuccess: string;
    updateSuccess: string;
    deleteSuccess: string;
    roleAndDelegation: string;
    decentralization: string;
    tooltipQS: string;
    code: string;
    codeName: string;
  };
  user: {
    account: string;
    accountCode: string;
    accountName: string;
    phoneNumber: string;
    tooltipQS: string;
    title: string;
    identificationNumber: string;
    position: string;
    role: string;
    dateBirth: string;
    createDate: string;
    reason: string;
    approve: string;
  };
  userGroupManager: {
    groupCode: string;
    groupName: string;
    roles: string;
    delete: string;
    user: string;
    groupNameUser: string;
    groupCodeUser: string;
    userGroup: string;
    title: string;
    tooltipQS: string;
  };
  packageAuthorization: {
    tooltipQS: string;
    name: string;
    bundledPackage: string;
    creator: string;
    createdDate: string;
    updater: string;
    updateDate: string;
    titleCreate: string;
    titleEdit: string;
    titleView: string;
  };
  matchingRules: {
    tooltipQS: string;
    matchingRules: string;
    ruleName: string;
    dataset: string;
    alenOThreshold: string;
    loci: {
      tooltipQS: string;
      loci: string;
      otherStats: string;
      frequency: string;
      editLoci: string;
      validationFrequency: string;
    };
    kit: {
      tooltipQS: string;
      kit: string;
    };
    duplicateDefaultName: string;
  };
  requestManagement: {
    request: string;
    createHandleErrorRequest: string;
    requestManagement: string;
    requestCode: string;
    requestType: string;
    remove: string;
    integration: string;
    userID: string;
    userName: string;
    refused: string;
    requestProcessingHistory: string;
    addRequest: string;
    editRequest: string;
    approvedRequest: string;
    typeOfRequest: string;
    turn: string;
    reject: string;
    reasonsForRejection: string;
    selectTypeRequest: string;
    selectDataFile: string;
    sampleProcessingInformation: string;
    transactionDateAndTime: string;
    codeTransaction: string;
    caseData: string;
    caseCode: string;
    placeholderCaseCode: string;
    identifier: string;
    placeholderIdentifier: string;
    placeholderPath: string;
    fullName: string;
    gender: string;
    male: string;
    female: string;
    birthday: string;
    descriptionOfPurpose: string;
    selectMatchRules: string;
    selectDataSource: string;
    selectErrorRequest: string;
    placeholderErrorRequest: string;
    transId: string;
    dateTrans: string;
    validationResultsTable: string;
    duplicateStrRatio: string;
    duplicateAlenRatio: string;
    probability: string;
    relationship: string;
    indexCpi: string;
    relationshipProbability: string;
    matchInsightsTable: string;
    SlStrDuplicate: string;
    SlAlenDuplicate: string;
    dateOfBirth: string;
    familyTree: string;
    dataDnaMain: string;
    dataType: string;
    integrationTime: string;
    requiredSource: string;
    profileIdentifier: string;
    errorDescription: string;
    codeProfile: string;
    // Actiog;
    update: string;
    delete: string;
    confirm: string;
    history: string;
    // Placeholder searcg;
    quickSearch: string;
    searchStatusRequest: string;
    searchTypeRequest: string;
    selectProcessingStatus: string;
    groupRequest: string;
    // Trạng thái yêu cầg;
    addNewStatus: string;
    rejectStatus: string;
    approvedStatus: string;
    // Loại yêu cầg;
    addADNFile: string;
    updateADNFile: string;
    deleteADNFile: string;
    confirmADNFile: string;
    searchADNFile: string;
    twinMarkingADN: string;
    handleErroneousSamplesAndRetrieveNewSamples: string;
    integrate2OrMoreDNAIntoTheDatabase: string;

    dataFilePath: string;
    fileNameError: string;
    detailError: string;
    folderPath: string;
    status: {
      new: string;
      not_approved: string;
      approved: string;
      data_processing: string;
      adn_processing: string;
      done: string;
      fail: string;
    };
    reasonRejectRequest: string;
    dataProcessing: string;
    dataProcessingADN: string;
    responseErrRequest: {
      success: string;
      duplicatedSample: string;
      duplicatedSubject: string;
      duplicatedTransaction: string;
      internalErrorServer: string;
      adnProfileNotFound: string;
    };
    tableDetailMatched: string;
  };
  categoryReason: {
    tooltipQS: string;
    reasonTypeCode: string;
    reasonType: string;
    reasonCode: string;
    reasonName: string;
    reasonCreator: string;
    status: string;
    updatedBy: string;
    updatedDate: string;
  };
  kits: {
    name: string;
    lociCount: string;
    listLoci: string;
    chooseLoci: string;
  };
  auditTrail: {
    auditTrail: string;
    subsystem: string;
    remove: string;
    integration: string;
    identificationNumber: string;
    userName: string;
    awaitingApproval: string;
    approved: string;
    autocomplete: string;
    refused: string;
    act: string;
    parametersChange: string;
    descError: string;
    logDetail: string;
  };
  transitionId: {
    name: string;
    transId: string;
    requestTime: string;
    completedTime: string;
    tooltipQS: string;
    kinshipCoefficient: string;
    biologicalRelationship: string;
  };
  strSampleBrowse: {
    limit: string;
    useCccd: string;
    useCsvFile: string;
    compare: string;
    uploadFile: string;
    sampleFile: string;
  };
  strAnalysis: {
    appropriateRules: string;
    strSourceSample: string;
    strTargetSample: string;
    numberCccd: string;
    duplicateStr: string;
    overlappingAlleles: string;
    probability: string;
    relationship: string;
    cpiIndex: string;
    probabilityRelationship: string;
    fillInField: string;
    duplicateInfor: string;
    comparisonResults: string;
    inputCccd: string;
    targetSampleSTR: string;
    missingLoci: string;
    selectCsvFile: string;
    pleaseUploadFile: string;
    sampleInfor: string;
    matchingRule: string;
  };
  set: {
    titleRisk: string;
    titleADNByRegion: string;
    titleMediumSick: string;
    titleSet: string;
    titleADNAge: string;
    titleDrugResponse: string;
    numberCCCD: string;
    name: string;
    birth: string;
    nationality: string;
    permanentAddress: string;
    homeTown: string;
    characteristic: string;
    releaseDate: string;
    expirationDate: string;
    tradingCode: string;
    nameMother: string;
    nameFather: string;
    spouseName: string;
    requestDate: string;
    caseData: string;
    caseCode: string;
    timeSampling: string;
    analysisDone: string;
    placeSampling: string;
    samplingCode: string;
    editSample: string;
    downloadFileADN: string;
    inforADN: string;
    selectGz: string;
    sampleHandInfor: string;
    titleADNProvince: string;
    titleGeneDrug: string;
  };
  confirmSNPAnalysisADN: {
    name: string;
    biologicalRelationship: string;
    kinship: string;
    waitingToFind: string;
  };
  fileCollectionADN: {
    thoigiantrichxuat: string;
    total: string;
    totaldaxuly: string;
    totalchuaxuly: string;
    str_total: string;
    str_daxuly: string;
    str_chuaxuly: string;
    snp_total: string;
    snp_daxuly: string;
    snp_chuaxuly: string;
    mtdna_total: string;
    mtdna_daxuly: string;
    mtdna_chuaxuly: string;
    stt: string;
    titleFileCollectionADN: string;
    action: string;
  };
  dataSourceManagement: {
    name: string;
    span: string;
    samplesCount: string;
    unit: string;
    time: string;
    lastUpdate: string;
    dataStructure: string;
    tooltipQS: string;
    casework: string;
    population: string;
    prison: string;
    list: string;
  };
  dataManagement: {
    title: string;
    clusterCode: string;
    name: string;
    gender: string;
    id_number: string;
    dob: string;
    data_type: string;
    status: string;
    detail: string;
    relationshipFromDNA: string;
    generalRelationship: string;
    identical: string;
    paternity: string;
    nonPaternity: string;
    duplicate: string;
    PO: string;
    FS: string;
    quadraticRelationship: string;
    tertiaryRelationship: string;
    quaternaryRelationship: string;
    UN: string;
  };
  adnProfileList: {
    lastModifyDate: string;
    numberProfileStr: string;
    numberProfileSnp: string;
    numberProfileMtADN: string;
    subjectInfor: string;
    ADNProfileInformation: string;
    dataStr: string;
    updateAt: string;
    dataSNP: string;
    backToList: string;
    viewDetailAdnProfile: string;
    firstProfie: string;
    secondProfile: string;
    threeProfile: string;
    sttProfile: string;
    mainProfile: string;
    profileData: string;
    chromosomeDistributionOfSNPs: string;
  };
  gene: {
    normal: string;
    warning: string;
    avoid: string;
    search: string;
  };
  errorKey: {
    DNA_PROFILE_NOT_FOUND: string;
    duplicateSample: string;
    duplicateSubject: string;
    duplicateTransition: string;
    internalServerError: string;
    adnProfileNotFound: string;
    success: string;
  };
  relationsShip: {
    Identical: string;
    Paternity: string;
    NonParternity: string;
    Dup_MZ: string;
    PO: string;
    FS: string;
    secondNd: string;
    threeRd: string;
    fourTh: string;
    UN: string;
  };
  localSampleList: {
    createDate: string;
    localSampleList: string;
    identifier: string;
    barCode: string;
    ftaCard: string;
    sampleCode: string;
    envelopStamp: string;
    prisonerCode: string;
    prisonerName: string;
    prisonerAnotherName: string;
    criminalRecord: string;
    gender: string;
    prisonName: string;
    dateOfDetention: string;
    dateServingSentence: string;
    status: string;
    placeholderSearch: string;
    transferToCentral: string;
    addSample: string;
    sample: string;
    stt: string;
    dateOfBirth: string;
    fatherName: string;
    birthPlace: string;
    ethnicity: string;
    career: string;
    motherName: string;
    nationality: string;
    permanent: string;
    criminalDuration: string;
    statusLabel: {
      PENDING: string;
      DELIVERY: string;
      SAMPLED: string;
    };
    sampleManager: string;
  };
  transferRequestSample: {
    addNewRequestTransferred: string;
    detailNewRequestTransferred: string;
    transferRequestSample: string;
    approver: string;
    requestCode: string;
    createdAt: string;
    createdBy: string;
    sampleQuantity: string;
    status: string;
    statusLabel: {
      transferredSample: string;
      sampleReceived: string;
    };
    sampleRefused: string;
  };
  ceOperationManagement: {
    ceOperationManagement: string;
    performCe: string;
    batchAnalysisInformation: string;
    analysisBatchCode: string;
    updateBy: string;
    gender: string;
    sampleQuantity: string;
    analysisTime: string;
    lastModifyDate: string;
    status: string;
    stt: string;
    assignedEmployeeCode: string;
    duty: string;
    newAnalysisBatchDate: string;
    analysisDetention: string;
    note: string;
    noteCompleteAndUpload: string;
    noteCompleteAndUploadFail: string;
    noteSuccess: string;
    notError: string;
    listSamplePlate: string;
    sampleBarcode: string;
    placementOnBatch: string;
    completeAndUploadFileCe: string;
    viewDetailedListTemplates: string;
    listSample: string;
    machineResultFile: string;
    viewPlateDetailDiagram: string;
    plateDiagram: string;
    statusLabel: {
      notComplete: string;
      completed: string;
    };
  };
  pcrOperationManagement: {
    pcrOperationManagement: string;
    performPCR: string;
    batchAnalysisInformation: string;
    analysisBatchCode: string;
    updateBy: string;
    gender: string;
    sampleQuantity: string;
    analysisTime: string;
    lastModifyDate: string;
    status: string;
    stt: string;
    assignedEmployeeCode: string;
    duty: string;
    newAnalysisBatchDate: string;
    analysisDetention: string;
    note: string;
    noteCompleteAndUpload: string;
    noteCompleteAndUploadFail: string;
    noteSuccess: string;
    notError: string;
    listSamplePlate: string;
    sampleBarcode: string;
    placementOnBatch: string;
    completeAndUploadFileCe: string;
    viewDetailedListTemplates: string;
    listSample: string;
    machineResultFile: string;
    viewPlateDetailDiagram: string;
    plateDiagram: string;
    statusLabel: {
      notComplete: string;
      completed: string;
    };
  };
  warehouseManagement: {
    warehouseAddManagement: {
      label: string;
      requirementCode: string;
      dateOfCreated: string;
      transferedPrison: string;
      receiver: string;
      status: string;
      sampleQuantity: string;
      statusLabel: {
        RECEIVED: string;
        NOT_RECEIVED: string;
      };
      receive: string;
      prison: string;
    };
  };
  ListExample: {
    requestExport: string;
    exampleAtLab: string;
    exampleAtInventory: string;
    infoPrince: string;
    infoSample: string;
    place: string;
    samplingPlace: string;
    samplingPersonName: string;
    samplingPersonID: string;
    status: string;
    list: string;
  };
  ExportInventory: {
    personRequest: string;
    handoverOfficer: string;
    batchRun: string;
  };
}
